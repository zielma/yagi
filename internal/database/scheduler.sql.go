// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scheduler.sql

package database

import (
	"context"
)

const getJobs = `-- name: GetJobs :many
SELECT id
 ,type
 ,status
 ,cron_expression
 ,params
FROM jobs
`

type GetJobsRow struct {
	ID             string
	Type           string
	Status         string
	CronExpression string
	Params         string
}

func (q *Queries) GetJobs(ctx context.Context) ([]GetJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobsRow
	for rows.Next() {
		var i GetJobsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Status,
			&i.CronExpression,
			&i.Params,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobCronExpression = `-- name: UpdateJobCronExpression :exec
UPDATE jobs 
SET cron_expression = ?
    ,updated_at = datetime('now')
WHERE id = ?
`

type UpdateJobCronExpressionParams struct {
	CronExpression string
	ID             string
}

func (q *Queries) UpdateJobCronExpression(ctx context.Context, arg UpdateJobCronExpressionParams) error {
	_, err := q.db.ExecContext(ctx, updateJobCronExpression, arg.CronExpression, arg.ID)
	return err
}
