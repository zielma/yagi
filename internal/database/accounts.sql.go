// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (id, name, budget_id, closed, balance, cleared) 
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateAccountParams struct {
	ID       string
	Name     string
	BudgetID string
	Closed   bool
	Balance  int64
	Cleared  int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.BudgetID,
		arg.Closed,
		arg.Balance,
		arg.Cleared,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, budget_id, closed, balance, cleared FROM accounts WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BudgetID,
		&i.Closed,
		&i.Balance,
		&i.Cleared,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, name, budget_id, closed, balance, cleared FROM accounts
`

func (q *Queries) GetAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BudgetID,
			&i.Closed,
			&i.Balance,
			&i.Cleared,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
