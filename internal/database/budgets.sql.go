// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: budgets.sql

package database

import (
	"context"
)

const createBudget = `-- name: CreateBudget :exec
INSERT INTO budgets (id, name) VALUES (?, ?)
`

type CreateBudgetParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) error {
	_, err := q.db.ExecContext(ctx, createBudget, arg.ID, arg.Name)
	return err
}

const getBudget = `-- name: GetBudget :one
SELECT id, name FROM budgets WHERE id = ? LIMIT 1
`

func (q *Queries) GetBudget(ctx context.Context, id string) (Budget, error) {
	row := q.db.QueryRowContext(ctx, getBudget, id)
	var i Budget
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT id, name FROM budgets
`

func (q *Queries) GetBudgets(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.QueryContext(ctx, getBudgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
